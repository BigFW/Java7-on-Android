Using Java 7 on Android.

1) Clone this project.

2) Add java.lang.* from this project as a base package to whatever project to get auto resource close working. This will override the internal Throwable java class so it uses this one instead.

3) Add cc.io.* from this project to whatever project to get auto resource close working. This just wraps the Input streams.

4) Set your project to use the Java 7 language level and the Android SDK to build off of JDK 7.


--Frequently Asked Questions--


Q) Help! I'm getting some error related to java: cannot find method addSuppressed(java.lang.Throwable). How do I fix this?

A) You probably allowed your IDE auto-formatter to reformat the java.lang.* files you included from above or manually pasted the files into your IDE instead of importing/cloning them (which also triggered auto format). Modifying these files (even accidentally) is asking for trouble as such things can make the project revert back to using the internal Android Throwable instead of the project version. You can fix this by pasting the original file outside of your IDE or reclone the source again. I recommend setting the project java.lang.* package to be read only to prevent any accidental mishaps. It's also possible it might randomly still give you this error (with Intellij IDEA at least). If it does, just do the steps mentioned above.

Q) Can I include this as a jar library?

A) No, at least not in any easy way I know of. Android will complain about overriding system classes if you do and short of modifying the dalvik compiler sources, there is no easy way around it. Well, actually there sort of is, but it requires building with Ant directly or perhaps Maven as you can get around the issue with that. Intellij though won't like it if you are using the default method of building if you try to include these sources as a jar.

Q) Can you get Java 8 working?

Tried that and no go.

Q) Do you have example code showing things working?

A) Yes, see TestActivity and Utils. Tested and working on Android 2.2+.

Q) Will this work for other resource classes (like ObjectInputStream)?

A) I'm sure it will, I just didn't include them. See the implemented InputStreams as a template.

Q) So what works from Java 7?

A) All the syntatic sugar stuff and also "try with resources." (see below)

1) String Switches

2) Try with resources (a.k.a "using/with", auto close)

3) Multiple exception caught in one catch block

4) Integer literals for readability (e.g. 100_000_000 or 20_000)

5) Type inference on collections (a.k.a. "diamonds")


Q) What doesn't work?

1) java.nio.*

2) threading and multiple processor enhancements (fork/join)

3) File change notifications (watch/notify file api stuff)

4) invokedynamic


Q) Will this work on Eclipse/Netbeans/etc?

A) Probably, but I don't really know how Android works on Eclipse/Netbeans, so you're on your own for that. Ant works, but requires some modifying of the build.xml to override some of the compilation time stuff.
